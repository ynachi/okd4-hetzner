---
# tasks file for prepare-okd

- name: Store the checksum of the file
  copy:
    dest: "{{ fcos_checksum_filename }}"
    content: "{{ fcos_checksum_sha256\n }}"
    mode: 0644
  become: true

- name: Check download urls
  uri:
    method: HEAD
    url: "{{ item }}"
    status_code:
      - 200
      # Forbidden because of github forwards to aws s3.
      # HEAD request to S3 is forbidden
      - 403
  with_items: "{{ check_urls }}"

- name: Check if fcos image already downloaded and get checksum
  stat:
    checksum_algorithm: sha256
    path: "{{ fcos_path }}/{{ fcos_file }}"
  register: fcos_old_image
  become: true

- name: Verify existing coreos image is valid
  lineinfile:
    name: "{{ fcos_path }}/{{ fcos_file }}.sha256.txt"
    line: "{{ fcos_old_image.stat.checksum }}  {{ fcos_file }}"
    state: present
  check_mode: true
  register: csum_check
  failed_when: (csum_check is changed) or (csum_check is failed)
  ignore_errors: true
  when: fcos_old_image.stat.exists
  become: true

- name: Download fresh fcos image if previous doesn't exist
  become: true
  block:
    # Work-a-round for https://github.com/ansible/ansible/issues/71420
    #   fix not shipped yet
    - name: Findout exactly sha256
      set_fact:
        fcos_csum_str: "{{ lookup('vars', 'fcos_checksum_sha256').split() | first }}"
      when: fcos_csum_str is not defined

    - name: Download fcos
      get_url:
        url: "{{ fcos_download_url }}"
        dest: "{{ fcos_path }}/{{ fcos_download_url | basename }}"
        checksum: "sha256:{{ fcos_csum_str }}"
      register: fcos_download

    - name: Get filetype
      stat:
        path: "{{ fcos_path }}/{{ fcos_download_url | basename }}"
      register: fcos_stat

    - name: unzip the fcos
      command: "gunzip {{ fcos_path }}/{{ fcos_download_url | basename }}"
      args:
        chdir: "{{ fcos_path }}"
        creates: "{{ fcos_path }}/{{ fcos_file }}"
      register: unzip
      when: fcos_stat.stat.mimetype == 'application/x-gzip'

    - name: unxz the coreos
      command: "unxz {{ fcos_path }}/{{ fcos_download_url | basename }}"
      args:
        chdir: "{{ fcos_path }}"
        creates: "{{ fcos_path }}/{{ fcos_file }}"
      register: unxz
      when: fcos_stat.stat.mimetype == 'application/x-xz'

    - name: Calculate checksum of the new coreos image
      stat:
        checksum_algorithm: sha256
        path: "{{ fcos_path }}/{{ fcos_file }}"
      register: fcos_csum

    - name: store the checksum of the file
      copy:
        dest: "{{ fcos_path }}/{{ fcos_file }}.sha256.txt"
        content: "{{ fcos_csum.stat.checksum }}  {{ fcos_file }}\n"
        mode: 0644

  when: >
    (not fcos_old_image.stat.exists) or
    csum_check.changed or
    csum_check.failed

- name: Create OKD artifacts directory
  file:
    path: "{{ item }}"
    state: directory
    mode: u+rwx,g+rx,o+rx
  loop:
    - "/opt/openshift-install-{{ okd_version }}"
    - "/opt/openshift-client-{{ okd_version }}"
  become: true

- name: Download Openshift installer
  unarchive:
    src: "{{ okd_install_download_url }}"
    dest: "/opt/openshift-install-{{ okd_version }}/"
    remote_src: yes
    mode: u+rwx,g+rx,o+rx
    owner: root
    group: root
    exclude:
      - 'README.md'
    creates: "/opt/openshift-install-{{ okd_version }}/openshift-install"
  become: true

- name: Download OKD client
  unarchive:
    src: "{{ okd_client_download_url }}"
    dest: "/opt/openshift-client-{{ okd_version }}/"
    remote_src: yes
    mode: u+rwx,g+rx,o+rx
    owner: root
    group: root
    exclude:
      - 'README.md'
    creates: "/opt/openshift-client-{{ okd_version }}/oc"
  become: true

- name: Download Helm client
  get_url:
    url: "{{ helm_cli_location }}"
    mode: u+rwx,g+rx,o+rx
    dest: "/opt/openshift-client-{{ okd_version }}/helm"
  become: true

- name: Download butane client
  get_url:
    url: "{{ butane_cli_location }}"
    mode: u+rwx,g+rx,o+rx
    dest: "/opt/openshift-client-{{ okd_version }}/butane"
  become: true

- name: Create a symbolic link
  file:
    src: "{{ item.value }}"
    dest: "{{ item.key }}"
    state: link
    force: yes
  with_dict:
    "/usr/local/bin/oc": "/opt/openshift-client-{{ okd_version }}/oc"
    "/usr/local/bin/kubectl": "/opt/openshift-client-{{ okd_version }}/kubectl"
    "/usr/local/bin/openshift-install": "/opt/openshift-install-{{ okd_version }}/openshift-install"
    "/usr/local/bin/helm": "/opt/openshift-client-{{ okd_version }}/helm"
    "/usr/local/bin/butane": "/opt/openshift-client-{{ okd_version }}/butane"
  become: true

- name: Create ignition files
  include: create-ignition.yml
  vars:
    ssh_public_key: "{{ lookup('file', '{{ ssh_public_key_location }}.pub') }}"
  tags: ignition

#
# Create VMs
#
- name: Create bootstrap node
  include: create-vm.yml
  vars:
    vm_instance_name: "{{ cluster_name }}-bootstrap"
    vm_network: "{{ cluster_name }}"
    vm_ignition_file: "{{ openshift_install_dir }}/bootstrap-extra.ign"
    vm_mac_address: "52:54:00:{{ '%02x' % vn_subnet.split('.')[1]|int }}:{{ '%02x' % vn_subnet.split('.')[2]|int }}:{{ '%02x' % 2 }}"
    vm_vcpu: 4
    vm_memory_size: 16384
    vm_memory_unit: 'MiB'
    vm_root_disk_size: '120G'

- name: Create master nodes
  include: create-vm.yml
  vars:
    vm_instance_name: "{{ cluster_name }}-master-{{ item }}"
    vm_network: "{{ cluster_name }}"
    vm_ignition_file: "{{ openshift_install_dir }}/master-extra.ign"
    vm_mac_address: "52:54:00:{{ '%02x' % vn_subnet.split('.')[1]|int }}:{{ '%02x' % vn_subnet.split('.')[2]|int }}:{{ '%02x' % (10 + item|int) }}"
    vm_vcpu: "{{ master_vcpu }}"
    vm_special_cpu: "{{ master_special_cpu | default('') }}"
    vm_memory_size: "{{ master_memory_size }}"
    vm_memory_unit: "{{ master_memory_unit }}"
    vm_root_disk_size: "{{ master_root_disk_size }}"
  with_sequence: start=0 end="{{ master_count|int - 1 }}" stride=1

- name: Create compute node
  include: create-vm.yml
  vars:
    vm_instance_name: "{{ cluster_name }}-compute-{{ item }}"
    vm_network: "{{ cluster_name }}"
    vm_ignition_file: "{{ openshift_install_dir }}/worker-extra.ign"
    vm_mac_address: "52:54:00:{{ '%02x' % vn_subnet.split('.')[1]|int }}:{{ '%02x' % vn_subnet.split('.')[2]|int }}:{{ '%02x' % (10 + master_count|int + item|int) }}"     # noqa line-length
    vm_vcpu: "{{ compute_vcpu }}"
    vm_special_cpu: "{{ compute_special_cpu | default('') }}"
    vm_memory_size: "{{ compute_memory_size }}"
    vm_memory_unit: "{{ compute_memory_unit }}"
    vm_root_disk_size: "{{ compute_root_disk_size }}"
  with_sequence: start=0 end="{{ compute_count|int - 1 if compute_count|int > 0 else 0 }}" stride=1
  when: compute_count > 0

- name: Include post installation tasks
  include: post-install.yml
  tags: post-install
